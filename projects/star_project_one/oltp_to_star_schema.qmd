---
title: "OLTP to Dimensional Modeling"
subtitle: "W03 - W05 Lab" # left blank
image: "starschema.png"
categories: ["Star Schema", "OLTP", "Fact", "Dimension"]
format:
  html:
    self-contained: true
    fontsize: 1em # changes all fonts. default is 1
    linestretch: 1.5 # distance btw lines. defualt is 1.5
    math: katex
    toc: false # switch between: false or true
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: true
        toggle: true
        caption: See code
execute:
  python: .venv/Scripts/python.exe # important. If using this in a folder inside the root folder, use two periods for the program to know to read one folder back: ../.venv/Scripts/python.exe
editor:
  markdown:
    wrap: sentence
---


Overview

**Task**: Create a data warehouse dimensional model by using the MySQL Workbench software.

**Purpose**: Learn how to re-model data from an Online Transaction Processing (OLTP) system to an Online Analytical Processing (OLAP) system or data warehouse using a Star Schema as the modeling solution.

---

## Instructions

> **Group Collaboration**: Complete this lab with your W03 Presentation: ETL Processes group.

You have just started a new position at a company. Your manager expects you to learn the distinction between a **data mart** and a **data warehouse**, and has encouraged you to consult online resources for clarity.

---

# Steps

## 1. **Review preparation articles**:

- [Reverse Engineering](https://dev.mysql.com/doc/workbench/en/wb-reverse-engineer-create-script.html)  
- [Forward Engineering](https://dev.mysql.com/doc/workbench/en/wb-forward-engineering-sql-scripts.html)  
- [Creating a New ERD Model](https://dev.mysql.com/doc/workbench/en/wb-getting-started-tutorial-creating-a-model.html)  
- [Basic ERD Modeling](https://dev.mysql.com/doc/workbench/en/wb-basic-modeling.html)
- [Adding a Table](https://dev.mysql.com/doc/workbench/en/wb-basic-add-table.html)  
- [Creating a Foreign Key](https://dev.mysql.com/doc/workbench/en/wb-basic-foreign-key.html)  

---

## 2. Install MySQL Workbench:

Install MySQL Workbench using [MySQL Workbench Installation Guide](https://dev.mysql.com/doc/workbench/en/wb-installing.html)

---

## 3. Download the starting model:

You can click on this [ITM425 Model](https://byui.instructure.com/courses/343824/files/147400246/download?wrap=1)  to download your starting MySQL Workbench file.

---

## 4. **Error Checking**: 

   - The starting point for the lab is an Online Transaction Processing (OLTP) Video Database ERD. You will find it attached to the lab. Your task is to forward engineer with the model to identify any shortfalls with the design and fix them. You can check for errors by running the forward engineering script, noting the errors and fixing them in the base data model.

---

## 5. **Design Star Schema**:  

   - After you have fixed all the errors, you will have a new Video Model. You use that model to design a star schema with dimension and fact tables. You should build the fact table with transactions; and you should build dimension tables that let you filter for customers, locale, item, and member account.

---

## 6. Star Schema Requirements

You start with over 60 tables in the completed relational model of the Video Store. You may MySQL Workbench locally, or in a Docker instance to convert the OLTP ERD into a Kimball Star Schema with one fact table and at least three dimension tables. The tables should at least model the following:

- One dimension table should include the item table, inclusive of item ratings, rating agencies, genre, and item types from the common_lookup table data.
- One dimension table should include the member account, contact information including address and telephone information.
- One dimension table should include the date. This table would have one record per day and would have attributes about that day to allow the end user to filter that data. See the [Kimball Group definition](https://www.kimballgroup.com/data-warehouse-business-intelligence-resources/kimball-techniques/dimensional-modeling-techniques/calendar-date-dimension/) of a standard date dimension.
- One fact table should include data from the rental and rental_item tables with the rental_item data setting the granularity of the fact table.


---

# Deliverables

7. Submit a **screenshot** of your finalized **MySQL Workbench dimensional model**.


## Star Schema requirements




::: {.columns}
:::: {.column width="50%"}

**Fact table requirements**

- Transaction Fact Tables[^transaction_fact_tables]

1. **Atomic transaction grain**

   * Each row represents a measurement event at a specific point in **space and time**.

2. **Foreign keys for each associated dimension**

   * Links to dimension tables such as customer, product, time, etc.

3. **Measured numeric facts**

   * Must be **consistent with the transaction grain** (e.g., quantity, price, revenue).

4. **Optional precise time stamps**

   * For finer temporal analysis beyond standard date keys.

5. **Optional degenerate dimension keys**

   * e.g., invoice numbers or transaction IDs stored directly in the fact table.

6. **Dimensional richness**

   * High number of dimensions enables detailed **slicing and dicing** of the data.

7. **Density can vary**

   * **Dense**: frequent events
   * **Sparse**: events only when a transaction occurs




- natural keys and Surrogate[^surrogate] keys


- Nulls[^Nulls] in Fact Tables



::::
:::: {.column width="50%"}

**Dimensional Table Requirements**

- Dimension Table Structure[^dimension_table_structure]


1. **Single primary key column**: Uniquely identifies each row in the dimension table. Used as a **foreign key in associated fact tables**.

2. **Denormalized, wide, flat structure**: Contains many **textual, low-cardinality attributes**. Optimized for readability and query performance.

3. **Verbose descriptive attributes**: 1. Prefer **clear descriptions** over operational codes or abbreviations. 2. Enhances usability in reports and dashboards.

4. **Attributes used for filtering and grouping**: Primary targets for **query constraints**, **group-by clauses**, and **BI tools**.

5. **Dimension attribute domain values**: These are typically the **labels shown in reports** and visualizations.

--- 

- Dimension Surrogate Keys[^dimension_surrogate_keys]

1. **Single primary key column**: Each dimension table has one unique primary key.

2. **Must *not* use natural keys from operational systems**: 1. Multiple dimension rows may exist for the same natural key (e.g., for tracking changes over time). 2. Natural keys may come from **multiple source systems** and can be **inconsistent or poorly managed**.

3. **Use surrogate keys instead**: 1. **Anonymous integer keys**, assigned **sequentially starting from 1**. 2. Maintains **control and consistency** within the DW/BI system.

4. **Avoid composite keys (e.g., natural key + date)**: Simplifies joins and indexing.

5. **Exception: date dimension**: Can use a **meaningful, natural primary key** (e.g., `yyyymmdd`) due to its stability and predictability.

---

- Natural, Durable, and Supernatural Keys[^natural_durable_keys]


1. **Created by operational source systems**: Natural keys reflect **business rules** and processes outside the control of the DW/BI system.

2. **Prone to change**: Example: an **employee number** may change if an employee is **rehired**, making the key unstable over time.

3. **Not suitable as a persistent identifier**: Cannot guarantee **durability** or **uniqueness** across time and systems.

4. **Must be replaced with durable keys**: Data warehouses should assign a **new durable (supernatural) key**, independent of business logic.

5. **Durable key format should be simple**: Use **sequential integers** (starting from 1) to ensure consistency and manageability.

---

- Null Attributes in Dimensions[^null_attributes_in_dimensions]


Avoid: Null values in dimension attributes

Use instead: Descriptive placeholders like "Unknown" or "Not Applicable"

Why avoid nulls: Grouping and filtering on nulls is inconsistent across databases



::::
:::






# Questions

OLTP fix issues?

table: country
id: country_name is set to INT(10) and not CHAR???
id: country_code is set to CHAR(2) and not INT(2)???


Star schema

so when we are maing this star schema, we don't worry to much about how the EPL is going to look like for example

how does it work when the connection in the OLTP look like this rental_item (child to (parent) rental (child) to(parent) contact (parent) to  (child) address (child) to (parent) street_Address

when rental_item and rental set the fact table and the rest set the dim_member table. 

We don't need to worry about having all the proper id's in the dim table? 

so for example street_address is parent to address and address is child to contact, but one row from street_address needs to match with one value from address to match the connection to rental. 

also member seems to be the main table and member is parent to contact and that is the only connection the member table has, but the contact table makes connection to the (child) rental table













![ Figure 3.9 Star Schema](png/book_star_schema.png){#fig-bookstarschema}

![Star Schema Sample from Online Analytical Processing wiki](png/star_sample.png){#fig-star_sample}

[^surrogate]:  the primary key is an auto-generated integer that has no meaning for the business entity being represented, but solely exists for the purpose of the relational database commonly referred to as a **surrogate key**.

[^Nulls]: nulls must be avoided in the fact table's foreign keys because these nulls would automatically cause a referential in tegrity violation. Rather than a null foreign key, the associated dimension table must have a default row (and surrogate key) representing the unknown or not applicable condition.



[^transaction_fact_tables]: A row in a transaction fact table corresponds to a measurement event at a point in space and time. Atomic transaction grain fact tables are the most dimensional and expressive fact tables; this robust dimensionality enables the maximum slicingand dicing of transaction data. Transaction fact tables may be dense or sparse because rows exist only if measurements take place. These fact tables always contain a foreign key for each associated dimension, and optionally contain precise time stamps and degenerate dimension keys. The measured numeric facts must be consistent with the transaction grain.


[^dimension_table_structure]: Every dimension table has a single primary key column. This primary key is embedded as a foreign key in any associated fact table where the dimension row's descriptive context is exactly correct for that fact table row. Dimension tables are usually wide, flat denormalized tables with many low-cardinality text attributes. While operational codes and indicators can be treated as attributes, the most powerful dimension attributes are populated with verbose descriptions. Dimension table attributes are the primary target of constraints and grouping specifications from queries and BI applications. The descriptive labels on reports are typically dimension attribute domain values.


[^dimension_surrogate_keys]:  dimension table is designed with one column serving as a unique primary key. This primary key cannot be the operational system's natural key because there will be multiple dimension rows for that natural key when changes are tracked over time. In addition, natural keys for a dimension may be created by more than one source system, and these natural keys may be incompatible or poorly administered. The DW/BI system needs to claim control of the primary keys of all dimensions; rather than using explicit natural keys or natural keys with appended dates, you should create anonymous integer primary keys for every dimension. These dimension surrogate keys are simple integers, assigned in sequence, starting with the value 1, every time a new key is needed. The date dimension is exempt from the surrogate key rule; this highly predictable and stable dimension can use a more meaningful primary key. See the section “Calendar Date Dimensions.”


[^natural_durable_keys]: Natural keys created by operational source systems are subject to business rules outside the control of the DW/BI system. For instance, an employee number (natural key) may be changed if the employee resigns and then is rehired. When the data warehouse wants to have a single key for that employee, a new durable key must be created that is persistent and does not change in this situation. This key is sometimes referred to as a durable supernatural key. The best durable keys have a format that is independent of the original business process and thus should be simple integers assigned in sequence beginning with 1. While multiple surrogate keys may be associated with an employee over time as their profile changes, the durable key never changes.


[^null_attributes_in_dimensions]: Null-valued dimension attributes result when a given dimension row has not been fully populated, or when there are attributes that are not applicable to all the dimension's rows. In both cases, we recommend substituting a descriptive string, such as Unknown or Not Applicable in place of the null value. Nulls in dimension attributes should be avoided because different databases handle grouping and constraining on nulls inconsistently.
