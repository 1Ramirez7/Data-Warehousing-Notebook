---
title: "Week 1 Introduction"
format: html
execute:
  cache: false
  freeze: false
---

# ðŸ§  Learning Objective

Learn the difference between a data mart and a data warehouse.

------------------------------------------------------------------------

ðŸŽ¯ **Learning Outcomes**

-   Understand the scope of a **data mart**\
-   Understand the scope of a **data warehouse**\
-   Learn how data marts may improve the **development telemetry** of data warehouses\
-   Learn how data marts may improve the **quality** of data warehouse design

------------------------------------------------------------------------

ðŸ“˜ **Reading Assignment**

**Chapter 1** â€” *Reliable, Scalable, and Maintainable Applications*

------------------------------------------------------------------------

## âœ… Reading Outcomes


**Use Cases: Data Marts vs. Data Warehouses**

| Use Case                        | Scenario                                                                 | Role                                                                                 | Type           |
|---------------------------------|---------------------------------------------------------------------------|--------------------------------------------------------------------------------------|----------------|
| Marketing Campaign Analysis     | Analyze effectiveness of recent campaigns                                | Marketing data mart provides quick insights on engagement and conversion rates       | Data Mart      |
| Sales Performance Tracking      | Sales team needs real-time performance data                              | Sales data mart offers focused access to salesperson metrics and regional trends     | Data Mart      |
| Financial Planning & Analysis   | Finance needs detailed data for budgeting and forecasting                | Financial data mart delivers department-specific info for planning and analysis      | Data Mart      |
| Enterprise-wide Reporting       | CEO needs comprehensive company performance report                        | Data warehouse integrates data across departments for full organizational view       | Data Warehouse |
| Historical Trend Analysis       | Analyze 10-year trends for strategic decisions                            | Data warehouse stores and retrieves historical data for long-term trend analysis     | Data Warehouse |
| Complex BI Queries              | Analysts run complex queries across multiple sources                      | Data warehouse supports deep analytics through optimized query performance           | Data Warehouse |

**Table: Data warehouse vs Data Mart**


| **Data Warehouse**                                                                 | **Data Mart**                                                                                 |
|------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|
| A data warehouse is used to store data from numerous subject areas.               | A data mart carries data related to a department, such as HR, marketing, finance, etc.        |
| It acts as a central data repository for a company.                               | It is a logical subsection of a data warehouse for particular departmental applications.      |
| Designed using star, snowflake, galaxy, or fact constellation schema.             | Data marts use a star schema for designing tables.                                            |
| Tricky to design and use due to its large size (more than 100GB).                 | Comparatively more manageable due to its small size (less than 100GB).                        |
| Supports the decision-making process company-wide.                                | Designed for specific user groups or corporate departments.                                   |
| Stores detailed information in denormalized or normalized form.                   | Holds highly denormalized data in summarized form.                                            |
| Has large dimensions and integrates data from many sources.                       | Smaller dimensions to integrate data from fewer sources.                                      |
| Subject-oriented and time-variant with long-term data retention.                  | Used for specific business areas with shorter-term data retention.                           |


-   Understand the scope of a **data mart**\
-   Understand the scope of a **data warehouse**\
-   Learn how data marts may improve the **development telemetry** of data warehouses\
-   Learn how data marts may improve the **quality** of data warehouse design


### Understanding the Scope of a Data Mart

A **data mart** is a **specialized subset of a data warehouse**. It focuses on a **specific business function, department, or user group** within an organization. Data marts are designed to provide different departments with access to **relevant data** so they can independently explore and extract insights specific to their unique requirements, ultimately fostering more informed and targeted decision-making. It draws information from only a particular source or a subset of a data warehouse.

Key aspects of a data mart's scope include:

*   **Subject-Oriented:** Data marts are often aligned with a specific business area like marketing, finance, or sales.
*   **Smaller Scale:** Data marts are comparatively **more manageable due to their small size (less than 100GB)**. This allows for **faster query performance** as the data is focused.
*   **Faster Deployment:** Data marts are **quicker to deploy** compared to large-scale data warehouses, offering a more agile solution for specific business units needing rapid access to analytics.
*   **Cost-Effective (for smaller projects):** Implementing data marts can be **more cost-effective for smaller-scale projects** as you build targeted marts fulfilling specific needs rather than a massive infrastructure.
*   **Use Star Schema:** Data marts typically use a **star schema for designing tables**, which is generally simpler to understand and query.
*   **Shorter Data Retention:** Data marts are often used for particular areas related to a business and may retain data for a **shorter duration** compared to a data warehouse.
*   **Decentralized System:** A data mart is often considered a **decentralized system** compared to a data warehouse.

There are different types of data marts:

*   **Dependent Data Marts:** Built using an existing data warehouse, taking a top-down approach.
*   **Independent Data Marts:** Standalone entities not directly connected to the data warehouse, built directly from external sources in a bottom-up approach. These can become hard to manage as businesses expand due to separate ETL tools and logic.
*   **Hybrid Data Marts:** Combine elements of both dependent and independent data marts, leveraging the coherence of a central warehouse while incorporating specific external data.

### Understanding the Scope of a Data Warehouse

A **data warehouse** is a **centralized data repository** that stores **large volumes of structured and often unstructured data from various sources** within an organization. It acts as a **central data repository for a company**, providing a **single source of truth (SSOT)** for existing and historical data for analysis and data-driven decision-making.

Key aspects of a data warehouse's scope include:

*   **Enterprise-Wide Analysis:** Designed for **comprehensive and in-depth analysis across various departments and functions**, providing a unified view for comprehensive reporting and analysis.
*   **Data Integration:** Crucial for **integrating and cleansing diverse data sources**, ensuring data consistency and reliability across the organization through robust **ETL (Extract, Transform, Load) processes**.
*   **Scalability:** Offers **scalability to handle massive amounts of data efficiently** (more than 100GB, potentially terabytes or petabytes) and support complex querying and reporting needs.
*   **Complex Schema Design:** Can be designed using various schemas like **star, snowflake, galaxy, or fact constellation schema**, although star schema is widely used. These schemas can be more complex than those used in data marts.
*   **Longer Data Retention:** Data warehouses store **detailed information in denormalized or normalized form** and are **time-variant**, with data existing for a **longer duration** to facilitate historical trend analysis.
*   **Subject-Oriented:** Focuses on providing information concerning a **subject** rather than a business's daily operations, emphasizing business intelligence (BI).
*   **Unified and Integrated:** Unifies and integrates data from different databases in a collectively suitable manner, incorporating data from diverse sources with consistent classification, layout, and coding.
*   **Non-volatile:** Does not remove primary data when new information is loaded, allowing only data reading and intermittent refreshing for a complete and updated picture.

### How Data Marts May Improve the Development Telemetry of Data Warehouses

**Development telemetry** in the context of data warehouses can be understood as the **detailed and clear monitoring of the data warehouse development process**, including performance metrics, data quality metrics, error rates during ETL, and the efficiency of query execution for specific business needs. Just as telemetry is essential for tracking a rocket, it's crucial for understanding the health and progress of a data warehouse project.

Data marts can improve the development telemetry of data warehouses in several ways:

*   **Focused Monitoring:** Since data marts cater to specific business needs, **monitoring efforts can be more targeted**. Instead of broadly monitoring the entire data warehouse, development teams can focus on the **performance and data quality within each data mart** in relation to its intended use. This allows for more granular and insightful telemetry.
*   **Early Issue Detection:** Developing and deploying data marts incrementally (as in the Kimball methodology) allows for **earlier detection of issues** in the data integration and transformation processes related to specific business areas. Problems identified in a smaller data mart are generally easier to diagnose and resolve than issues that might surface only after a large, complex data warehouse is fully built. The focused telemetry on a data mart can provide early warning signals.
*   **Faster Feedback Loops:** The quicker deployment and smaller scope of data marts facilitate **faster feedback loops** from the business users. Their usage patterns and reported issues within the data mart serve as valuable telemetry, indicating whether the data is meeting their analytical needs and highlighting areas for improvement in the underlying data warehouse design and ETL processes.
*   **Performance Measurement for Specific Use Cases:** Telemetry gathered from data marts directly reflects the **performance of the data warehouse for specific analytical use cases**. Metrics like query response times within a marketing data mart provide direct insights into how well the data warehouse supports marketing campaign analysis.
*   **Validation of Data Transformations:** The data within a data mart undergoes specific transformations relevant to its business function. Monitoring the data quality within the data mart (e.g., through validation rules defined during ETL) provides telemetry on the **effectiveness and correctness of these transformations**, which can then inform and improve the broader data transformation processes within the data warehouse.

### How Data Marts May Improve the Quality of Data Warehouse Design

Data marts can contribute to a higher quality data warehouse design through several mechanisms:

*   **Iterative and Agile Approach:** The Kimball approach, which advocates building data warehouses through subject-specific data marts, promotes an **iterative and agile development process**. By starting with smaller, focused data marts, designers can gather requirements and validate their design decisions incrementally. This iterative feedback loop helps refine the data model and ETL processes of the underlying data warehouse, leading to a more robust and user-centric design.
*   **Understanding Business Needs:** Data marts are driven by specific business requirements. Designing and implementing data marts forces data warehouse architects to have a deep understanding of the **analytical needs of different business units**. This granular understanding of how data will be used leads to a more relevant and effective overall data warehouse design.
*   **Testing Ground for Data Models and ETL:** Data marts can serve as a **testing ground for different data modeling techniques (like star schema) and ETL strategies** on a smaller scale. Lessons learned from the design and implementation of data marts, including performance bottlenecks and data quality issues, can be applied to improve the design of the larger data warehouse.
*   **Conformed Dimensions and Data Quality:** The Kimball methodology emphasizes the use of **conformed dimensions** across different data marts. This ensures that a single data item (like 'customer' or 'product') is used consistently across the organization. The process of conforming dimensions for data marts contributes to better data quality and consistency within the entire data warehouse.
*   **Prioritization Based on Business Value:** The development of data marts allows for **prioritization based on immediate business value**. By focusing on delivering data marts that address critical analytical needs first, organizations can ensure that the data warehouse development effort is aligned with business priorities and that the core data models and ETL processes are validated early on. This helps in building a data warehouse that truly meets the organization's needs.



---




-   Understand the meaning of **reliability**\
-   Understand the meaning of **scalability**\
-   Understand the meaning of **maintainability**

### Reliability

-   System works correctly even when things go wrong.
-   Key aspects:
    -   Performs as expected.
    -   Tolerates user mistakes/unexpected use.
    -   Handles expected load and data size.
    -   Prevents unauthorized access.
-   **Fault â‰  Failure**: Fault = component issue; Failure = service interruption.
-   Fault tolerance is essential.
-   Techniques:
    -   Test all levels (unit, integration, manual).
    -   Fast recovery from human errors (e.g. rollbacks).
    -   Clear monitoring (metrics, error rates).
    -   Good management and training (not covered deeply).

### Scalability

-   Ability to handle increased load (data, traffic, complexity).
-   Ask: "How do we scale if load grows?"
-   Define load using **load parameters** (e.g. RPS, user count).
-   Measure with **response time percentiles**.
-   Scaling often needs re-architecting as load increases.
-   Use general-purpose building blocks in scalable patterns.

### Maintainability

-   Easy for devs/ops to work on long-term (fix, run, adapt, evolve).
-   Three principles:
    -   **Operability**: Easy system operation (monitoring, automation, docs, sane defaults).
    -   **Simplicity**: Easy to understand; reduce complexity via good abstractions.
    -   **Evolvability**: Easy to change/adapt system in future (also called extensibility).

### Summary

-   **Reliability**: System works correctly despite faults.
-   **Scalability**: System handles growth efficiently.
-   **Maintainability**: System is easy to operate, understand, and modify.

# Longer Notes

test
this

## Reliability

**Reliability means that a system should continue to work correctly even when things go wrong.** This implies several aspects:

-   **The application performs the function that the user expected.**
-   **It can tolerate users making mistakes or using the software in unexpected ways.**
-   **Its performance is good enough for the required use case, under the expected load and data volume.**
-   **The system prevents any unauthorized access and abuse.**

Chapter 1 clarifies that a **fault**, which is when a component deviates from its specification, is different from a **failure**, which is when the entire system stops providing the required service. Since it's impossible to eliminate faults entirely, reliable systems are built with **fault-tolerance mechanisms** to prevent faults from causing failures.

Achieving reliability involves various techniques:

-   **Thorough testing at all levels** (unit, integration, manual) is crucial, especially for corner cases.
-   **Allowing quick and easy recovery from human errors** minimizes the impact of failures, for example, through fast rollbacks and gradual code rollouts.
-   **Setting up detailed and clear monitoring** (telemetry), including performance metrics and error rates, provides early warnings and helps diagnose issues.
-   Implementing good management practices and training (though beyond the scope of the book).

## Scalability

**Scalability describes a system's ability to cope with increased load.** It's not a simple label but rather a consideration of how the system handles growth in areas like data volume, traffic volume, or complexity. Discussing scalability involves questions like, "If the system grows in a particular way, what are our options for coping with the growth?" and "How can we add computing resources to handle the additional load?".

To understand scalability, it's necessary to first **describe the current load on the system using load parameters** relevant to the system's architecture (e.g., requests per second, read/write ratio, number of active users). Performance can then be measured using metrics like **response time percentiles**.

Maintaining good performance under increased load often requires **rethinking the system's architecture** as load increases by orders of magnitude. Scalable architectures are typically built from general-purpose building blocks arranged in familiar patterns.

## Maintainability

**Maintainability focuses on making the system easy to work on over time for various people (engineering and operations).** This includes tasks like fixing bugs, keeping the system operational, adapting it to new platforms and use cases, repaying technical debt, and adding new features.

Chapter 1 breaks down maintainability into three key design principles:

-   **Operability:** Making it easy for operations teams to keep the system running smoothly. This involves things like providing visibility into runtime behavior through good monitoring, supporting automation and integration with standard tools, avoiding dependency on individual machines, providing good documentation, and offering sensible defaults with the option to override them.
-   **Simplicity:** Making the system easy for new engineers to understand by removing as much complexity as possible. This doesn't refer to the user interface but to the internal design of the system. Complexity can manifest in various ways, leading to increased risk of bugs and difficulty in maintenance. Good abstractions can help manage complexity by extracting parts of the system into well-defined, reusable components.
-   **Evolvability:** Making it easy for engineers to make changes to the system in the future, adapting it to changing requirements and unanticipated use cases. This is closely linked to simplicity and good abstractions, as simple and understandable systems are generally easier to modify. Evolvability is also known as extensibility, modifiability, or plasticity.

In summary, reliability ensures the system works correctly despite faults, scalability ensures it can handle increased load effectively, and maintainability ensures it can be easily operated, understood, and evolved over time. These three principles are fundamental to the design of data-intensive applications.

**Sources**

-   [Comparison of data marts vs data warehouses with a visual summary chart](https://www.mighty.digital/blog/data-warehouse-vs-data-mart-know-the-difference)\
-   [Overview of functional differences between data marts and data warehouses](https://www.astera.com/type/blog/data-mart-vs-data-warehouse/)\
-   [Summary of leading data warehouse platforms (cloud and on-premise)](https://www.g2.com/categories/data-warehouse#grid)\
-   [Gartner's assessment of cloud data warehouse vendors](https://cloud.google.com/resources/gartner-dbms-mq-report)\
-   [Gartner's evaluation of business intelligence tools layered over data warehouses](https://cloud.google.com/blog/products/data-analytics/2024-gartner-magic-quadrant-analytics-and-business-intelligence)\
-   [G2â€™s grid of business intelligence platforms for descriptive analytics](https://www.g2.com/categories/business-intelligence)




